Please read all sections marked with **. All others are optional and provide
background information.


** Madlib C++ Code
==================

Current Ingredients:

1. Database Abstraction Layer (DBAL)
2. Ports
   - PostgreSQL
   - Greenplum


Installation from Source
========================

** Requirements:

- Installed LAPACK library and header files.
  
  Platform notes:
  + Mac OS X comes with LAPACK preinstalled (as part of the Accelerate
    framework)
  + On RedHat/CentOS, LAPACK comes with with the lapack-devel package
  + On Solaris, LAPACK comes with the Orcale Performance Studio
    (FIXME)

- Internet connection to automatically download MADlib's dependencies if needed
  (Boost, Armadillo). See notes below.


** Build instructions (required read):

	mkdir build
	cd build/
	cmake ..
	make


Notes:

- To speed things up, run "make -j X" instead of "make" where X is the number of
  jobs (commands) to run simultaneously. A good choice is the number of
  processor cores in your machine.
- MADlib depends on the C++ Boost header files. If the installed version of
  Boost is too outdated (pre 1.34), it is downloaded automatically.
  Alternatively, the path to the sources can be specified by calling cmake with
  "-DBOOST_TAR_SOURCE=/path/to/boost_x.tar.gz"
- MADlib depends on the linear-algebra library Armadillo. Since at this point
  Armadillo is not a common package on many platforms, we always build it during
  the build process and always install the armadillo shared inside the MADlib
  directory. (The Armadillo shared library is a mere umbrella library for the
  lower-level maths libraries LAPACK, BLAS, ...)
  Armadillo is downloaded automatically, unless the you call cmake with
  "-DARMADILLO_TAR_SOURCE=/path/to/armadillo_x.tar.gz", in which case this file
  is used.



To Do
=====

- Failed boost assertions should become error messages and not abort the process
- Translate armadillo error messages into our own error messages
- For DBMSs other than PG/GP, we need some proper reference counting for
  AbstractHandles. Perhaps wrapping shared_ptr will already work
