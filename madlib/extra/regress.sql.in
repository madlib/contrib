CREATE OR REPLACE FUNCTION linreg_trans(double precision[], double precision, double precision[])
RETURNS double precision[] AS
'@MADLIB_SHARED_LIB@'
LANGUAGE c IMMUTABLE STRICT;


CREATE OR REPLACE FUNCTION linreg_coef_final(double precision[])
RETURNS double precision[] AS
'@MADLIB_SHARED_LIB@'
LANGUAGE c IMMUTABLE STRICT;

DROP AGGREGATE IF EXISTS linreg_coef(double precision, double precision[]);
CREATE AGGREGATE linreg_coef(double precision, double precision[]) (
	SFUNC=linreg_trans,
	STYPE=float8[],
	FINALFUNC=linreg_coef_final,
	INITCOND='{0,0,0,0,0}'
);


CREATE OR REPLACE FUNCTION linreg_r2_final(double precision[])
RETURNS double precision AS
'@MADLIB_SHARED_LIB@'
LANGUAGE c IMMUTABLE STRICT;

DROP AGGREGATE IF EXISTS linreg_r2(double precision, double precision[]);
CREATE AGGREGATE linreg_r2(double precision, double precision[]) (
	SFUNC=linreg_trans,
	STYPE=float8[],
	FINALFUNC=linreg_r2_final,
	INITCOND='{0,0,0,0,0}'
);


CREATE OR REPLACE FUNCTION linreg_tstats_final(double precision[])
RETURNS double precision[] AS
'@MADLIB_SHARED_LIB@'
LANGUAGE c IMMUTABLE STRICT;

DROP AGGREGATE IF EXISTS linreg_tstats_final(double precision, double precision[]);
CREATE AGGREGATE linreg_tstats_final(double precision, double precision[]) (
	SFUNC=linreg_trans,
	STYPE=float8[],
	FINALFUNC=linreg_tstats_final,
	INITCOND='{0,0,0,0,0}'
);


CREATE OR REPLACE FUNCTION linreg_pvalues_final(double precision[])
RETURNS double precision[] AS
'@MADLIB_SHARED_LIB@'
LANGUAGE c IMMUTABLE STRICT;

DROP AGGREGATE IF EXISTS linreg_pvalues_final(double precision, double precision[]);
CREATE AGGREGATE linreg_pvalues_final(double precision, double precision[]) (
	SFUNC=linreg_trans,
	STYPE=float8[],
	FINALFUNC=linreg_pvalues_final,
	INITCOND='{0,0,0,0,0}'
);


CREATE OR REPLACE FUNCTION logreg_cg_step_trans(double precision[], boolean, double precision[], double precision[])
RETURNS double precision[] AS
'@MADLIB_SHARED_LIB@'
LANGUAGE c IMMUTABLE;

CREATE OR REPLACE FUNCTION logreg_cg_step_final(double precision[])
RETURNS double precision[] AS
'@MADLIB_SHARED_LIB@'
LANGUAGE c IMMUTABLE STRICT;

DROP AGGREGATE IF EXISTS logreg_cg_step(boolean, double precision[], double precision[]);
CREATE AGGREGATE logreg_cg_step(boolean, double precision[], double precision[]) (
	SFUNC=logreg_cg_step_trans,
	STYPE=float8[],
	FINALFUNC=logreg_cg_step_final,
	INITCOND='{0,0,0,0,0,0}'
);

CREATE OR REPLACE FUNCTION _logreg_cg_step_distance(double precision[], double precision[])
RETURNS double precision AS
'@MADLIB_SHARED_LIB@'
LANGUAGE c IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION _logreg_cg_coef(double precision[])
RETURNS double precision[] AS
'@MADLIB_SHARED_LIB@'
LANGUAGE c IMMUTABLE STRICT;


CREATE OR REPLACE FUNCTION logreg_irls_step_trans(double precision[], boolean, double precision[], double precision[])
RETURNS double precision[] AS
'@MADLIB_SHARED_LIB@'
LANGUAGE c IMMUTABLE;

CREATE OR REPLACE FUNCTION logreg_irls_step_final(double precision[])
RETURNS double precision[] AS
'@MADLIB_SHARED_LIB@'
LANGUAGE c IMMUTABLE STRICT;

DROP AGGREGATE IF EXISTS logreg_irls_step(boolean, double precision[], double precision[]);
CREATE AGGREGATE logreg_irls_step(boolean, double precision[], double precision[]) (
	SFUNC=logreg_irls_step_trans,
	STYPE=float8[],
	FINALFUNC=logreg_irls_step_final,
	INITCOND='{0,0,0}'
);

CREATE OR REPLACE FUNCTION _logreg_irls_step_distance(double precision[], double precision[])
RETURNS double precision AS
'@MADLIB_SHARED_LIB@'
LANGUAGE c IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION _logreg_irls_coef(double precision[])
RETURNS double precision[] AS
'@MADLIB_SHARED_LIB@'
LANGUAGE c IMMUTABLE STRICT;


CREATE OR REPLACE FUNCTION logreg_coef(
    "source" VARCHAR,
    "depColumn" VARCHAR,
    "indepColumn" VARCHAR,
    "numIterations" INTEGER /*+ DEFAULT 20 */,
    "optimizer" VARCHAR /*+ DEFAULT 'irls' */,
    "precision" DOUBLE PRECISION /*+ DEFAULT 0.0001 */)
RETURNS DOUBLE PRECISION[] AS $$
    import sys
    try:
        import regress
    except:
        sys.path.append("@MADLIB_PYTHON_PATH@")
        import regress

    return regress.compute_logregr_coef(**globals())
$$ LANGUAGE plpythonu VOLATILE;
